#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) distroy
#


import traceback
import sys
import os
import time

from core import log
from core import closure
from core import daemon
from core.addr import Addr
from core.listening import Listening
from core.connection import Connection
from core.timer import process_expire

from event.event import *

from server import cp0 as server


def get_options():
    import optparse
    parser = optparse.OptionParser(version = "%prog (distroy) 0.1")

    parser.add_option('-d', '--debug', dest='debug', action='store_true',
                      default=False, help='run with debug')
    parser.add_option('-l', '--listen', dest='listen', default='0.0.0.0:8000',
                      metavar='<address>', help='listen address, [[host:]port], default: 0.0.0.0:8000')
    parser.add_option('-L', '--log', dest='log', default='debug',
                      metavar='<log level>', help='log level, default: debug')

    opts, args = parser.parse_args()
    return opts, args



def main(opts, args):
    if log.set_level(opts.log) != 0:
        log.error(0, 'invalid log level: %s', opts.log)

    addr = Addr()
    if not addr.parse_listening(opts.listen):
        return -1

    handler = server.get_handler(opts, args)
    if not handler:
        return -1

    path = os.path.split(__file__)[0]
    log.set_work_path(path)
    path = '%s/crossproxy.log' % path
    log.init(path)

    while True:
        l = Listening()
        if l.listen(addr):
            break
        if addr.next_sockaddr():
            continue
        return -1

    if not opts.debug:
        l.close()
        l = None

    if not init_event():
        log.error(0, 'init event module failed')
        return -1

    if not opts.debug:
        daemon.daemon()

    if not opts.debug:
        # may be failed in cygwin, wait minutes
        l = Listening()
        if not l.listen(addr):
            return -1
    l.handler = handler
    add_conn(l, READ_EVENT)

    if not opts.debug:
        log.dup_stderr()

    log.info(0, 'listen success: %s', l.addr.text)

    last = int(time.time())
    while True:
        process_events(20)
        now = int(time.time())
        if last < now:
            process_expire(now - last)
            last = now

    return 0


if __name__ == "__main__":
    try:
        (opts, args) = get_options()
        exit(main(opts, args))
    except KeyboardInterrupt as exc:
        sys.stderr.write("\033[1;31moperation cancelled by user\033[0m\n")
        exit(-1)
    except Exception as exc:
        sys.stderr.write(traceback.format_exc())
        exit(-1)
